# coding: utf-8
"""
Django settings for ntdeploy project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
#from celery.schedules import crontab   # 添加计划任务


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_URL = 'https://ops.cctv.cn'

# 金山云认证密钥
ACCESS_KEY_ID = "******"
SECRET_ACCESS_KEY = "****"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+lse3+-b!5i*gl*' + '#' + '*$2^=$&rapk_-4lm^_bc01%^&ny=#d438p'
# SECRET_KEY = 'dsafl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'server',
    'options',
    'operating',
    'dashboard',
    'cmdb',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'ntdeploy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,  'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ntdeploy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '#DB_HOST#',
        'NAME': '#DB_NAME#',
        'USER': '#DB_USER#',
        'PASSWORD': '#DB_PASSWORD#',
        'PORT': #DB_PORT#
        }
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True
# USE_TZ = False   # 解决django celery跑计划任务后，时间差8小时问题


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# 设置该路径下的web访问不受限制
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

UPLOAD_URL = '/opt/data/upload'
# UPLOAD_URL = os.path.join(BASE_DIR, "upload")
if not os.path.exists(UPLOAD_URL):
    os.makedirs(UPLOAD_URL)


DES_KEY = "cctv"


# LOG_DIR = os.path.join(BASE_DIR, 'logs')
LOG_DIR = '/opt/log/ops_platform/'
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

TMP_DIR = '/tmp'

# 目标主机添加crontab的脚本存放路径
CRON_SHELL_PATH = '/opt/upload/crontab/'


# BROKER_URL = 'redis://{{REDIS_SERVER}}:{{REDIS_PORT}}/{{REDIS_DBNUM}}'

# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Shanghai'
# CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'


# 设置任务所在路径
# CELERY_IMPORTS = (
#     "service.logic",
#     'server.logic',
#     'operating.jobs',
#     'operating.logic',
#     'cmdb.logic'
# )


# CELERYBEAT_SCHEDULE = {
#     'myprint2': {
#         'task': 'cmdb.logic.scraper_example',   # 这里是具体的计划任务函数
#         # 'schedule': timedelta(seconds=7 * 60),  # 设置计划任务执行时间
#         'schedule': crontab(hour='*', minute=27)
#         # 'args': (16, 16),
#     },
# }

CSRF_COOKIE_NAME = "XCSRF-TOKEN"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard_bak': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(levelname)s]- %(message)s'
        },
        'standard': {
            'format': '[%(asctime)s] [%(threadName)s:%(thread)d:%(name)s] '
                      '[%(levelname)s] [%(module)s.%(funcName)s Line:%(lineno)d]- %(message)s'
        },
        },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            },
        'default': {
            'level':'INFO',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR,'default.log'), #或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter':'standard',
            "encoding": "utf8"
            },
        'ansible': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'ansible.log'),  # 或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
            "encoding": "utf8"
        },
        'worker': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'work.log'),  # 或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
            "encoding": "utf8"
        },
        'ksyun': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'ksyun.log'),  # 或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
            "encoding": "utf8"
        },
        'error': {
            'level':'ERROR',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR,'error.log'), #或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter':'standard',
            "encoding": "utf8"
            },
        'console':{
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'request_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR,'request.log'), #或者直接写路径：'filename':'c:\logs\request.log''
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter':'standard',
            "encoding": "utf8"
            },
        'scprits_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR,'script.log'), #或者直接写路径：'filename':'c:\logs\script.log'
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter':'standard',
            "encoding": "utf8"
            },
        },
    'loggers': {
        'django': {
            'handlers': ['default','console','error'],
            'level': 'DEBUG',
            'propagate': False
        },
        'ansible':{
            'handlers': ['ansible','console','error'],
            'level': 'INFO',
            'propagate': False
        },
        'worker':{
            'handlers': ['worker','console','error'],
            'level': 'INFO',
            'propagate': False
        },
        'ksyun':{
            'handlers': ['worker','console','error'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
        'scripts': {
            # 脚本专用日志
            'handlers': ['scprits_handler', 'console'],
            'level': 'INFO',
            'propagate': False
        },
    }
}
